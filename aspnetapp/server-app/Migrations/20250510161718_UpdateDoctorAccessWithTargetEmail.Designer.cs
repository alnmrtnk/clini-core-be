// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server_app.Data;

#nullable disable

namespace server_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250510161718_UpdateDoctorAccessWithTargetEmail")]
    partial class UpdateDoctorAccessWithTargetEmail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server_app.Models.DoctorAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean");

                    b.Property<string>("TargetUserEmail")
                        .HasColumnType("text");

                    b.Property<Guid?>("TargetUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("DoctorAccesses");
                });

            modelBuilder.Entity("server_app.Models.DoctorComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorAccessId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DoctorCommentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAccessId");

                    b.HasIndex("DoctorCommentTypeId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("DoctorComments");
                });

            modelBuilder.Entity("server_app.Models.DoctorCommentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DoctorCommentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "prescription"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Name = "reccomendations"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Name = "comment"
                        });
                });

            modelBuilder.Entity("server_app.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("RecordTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecordTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("server_app.Models.MedicalRecordFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("S3Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalRecordFiles");
                });

            modelBuilder.Entity("server_app.Models.RecordType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RecordTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Name = "report"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Name = "image"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Name = "prescription"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Name = "form"
                        });
                });

            modelBuilder.Entity("server_app.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EsculabPatientId")
                        .HasColumnType("text");

                    b.Property<string>("EsculabPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server_app.Models.DoctorAccess", b =>
                {
                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("DoctorAccesses")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Models.User", "SharedWithUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId");

                    b.Navigation("SharedWithUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.DoctorComment", b =>
                {
                    b.HasOne("server_app.Models.DoctorAccess", "DoctorAccess")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorAccessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Models.DoctorCommentType", "DoctorCommentType")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorCommentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("DoctorComments")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorAccess");

                    b.Navigation("DoctorCommentType");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("server_app.Models.MedicalRecord", b =>
                {
                    b.HasOne("server_app.Models.RecordType", "RecordType")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("RecordTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecordType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.MedicalRecordFile", b =>
                {
                    b.HasOne("server_app.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Files")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("server_app.Models.DoctorAccess", b =>
                {
                    b.Navigation("DoctorComments");
                });

            modelBuilder.Entity("server_app.Models.DoctorCommentType", b =>
                {
                    b.Navigation("DoctorComments");
                });

            modelBuilder.Entity("server_app.Models.MedicalRecord", b =>
                {
                    b.Navigation("DoctorComments");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("server_app.Models.RecordType", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("server_app.Models.User", b =>
                {
                    b.Navigation("DoctorAccesses");

                    b.Navigation("MedicalRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
