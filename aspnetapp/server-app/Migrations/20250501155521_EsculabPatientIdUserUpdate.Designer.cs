// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server_app.Data;

#nullable disable

namespace server_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501155521_EsculabPatientIdUserUpdate")]
    partial class EsculabPatientIdUserUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server_app.Models.DoctorAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorAccesses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-1234-1234-1234-1234567890ab"),
                            DoctorName = "Dr. Gregory House",
                            ExpiresAt = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            GrantedAt = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("87654321-4321-4321-4321-ba0987654321"),
                            DoctorName = "Dr. Meredith Grey",
                            ExpiresAt = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GrantedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("server_app.Models.HealthMeasurement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("MeasuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MeasurementType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HealthMeasurements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            MeasuredAt = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            MeasurementType = "BloodPressure",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Value = "118/76"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            MeasuredAt = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            MeasurementType = "BloodSugar",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Value = "5.4 mmol/L"
                        },
                        new
                        {
                            Id = new Guid("abcdefab-cdef-abcd-efab-cdefabcdefab"),
                            MeasuredAt = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            MeasurementType = "Weight",
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Value = "68 kg"
                        });
                });

            modelBuilder.Entity("server_app.Models.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Date = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            RecordType = "Lab Test",
                            Title = "Complete Blood Count",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Date = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            RecordType = "Imaging",
                            Title = "Chest X-Ray",
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Date = new DateTime(2024, 3, 12, 0, 0, 0, 0, DateTimeKind.Utc),
                            RecordType = "Doctor Visit",
                            Title = "Dermatology Consultation",
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Date = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            RecordType = "Prescription",
                            Title = "Blood Pressure Medication",
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Date = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RecordType = "Surgery",
                            Title = "Appendectomy",
                            UserId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("server_app.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EsculabPatientId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            DateOfBirth = new DateTime(1985, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "alice.smith@example.com",
                            FullName = "Alice Smith",
                            PasswordHash = "$2a$11$uG8v.z01UXD2DzTCKFTZP.U2r3koECkfjZg0Nbh3b6p5z1LGCb5BW",
                            PhoneNumber = "+380501234567"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            DateOfBirth = new DateTime(1990, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "bob.johnson@example.com",
                            FullName = "Bob Johnson",
                            PasswordHash = "$2a$11$uG8v.z01UXD2DzTCKFTZP.U2r3koECkfjZg0Nbh3b6p5z1LGCb5BW",
                            PhoneNumber = "+380509876543"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DateOfBirth = new DateTime(1978, 2, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "carol.williams@example.com",
                            FullName = "Carol Williams",
                            PasswordHash = "$2a$11$uG8v.z01UXD2DzTCKFTZP.U2r3koECkfjZg0Nbh3b6p5z1LGCb5BW",
                            PhoneNumber = "+380503456789"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            DateOfBirth = new DateTime(2000, 11, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "david.brown@example.com",
                            FullName = "David Brown",
                            PasswordHash = "$2a$11$uG8v.z01UXD2DzTCKFTZP.U2r3koECkfjZg0Nbh3b6p5z1LGCb5BW",
                            PhoneNumber = "+380507654321"
                        });
                });

            modelBuilder.Entity("server_app.Models.Vaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdministered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DoseNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vaccinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            DateAdministered = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoseNumber = 2,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            VaccineName = "COVID-19"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            DateAdministered = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoseNumber = 1,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222"),
                            VaccineName = "Influenza"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            DateAdministered = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoseNumber = 3,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            VaccineName = "Hepatitis B"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            DateAdministered = new DateTime(2023, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DoseNumber = 1,
                            UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            VaccineName = "Tetanus"
                        });
                });

            modelBuilder.Entity("server_app.Models.DoctorAccess", b =>
                {
                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("DoctorAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.HealthMeasurement", b =>
                {
                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("HealthMeasurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.MedicalRecord", b =>
                {
                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.Vaccination", b =>
                {
                    b.HasOne("server_app.Models.User", "User")
                        .WithMany("Vaccinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server_app.Models.User", b =>
                {
                    b.Navigation("DoctorAccesses");

                    b.Navigation("HealthMeasurements");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Vaccinations");
                });
#pragma warning restore 612, 618
        }
    }
}
